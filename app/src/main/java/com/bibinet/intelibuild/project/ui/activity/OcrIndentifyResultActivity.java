package com.bibinet.intelibuild.project.ui.activity;import android.content.Intent;import android.graphics.Color;import android.os.Bundle;import android.support.v7.widget.AppCompatImageView;import android.util.Log;import android.view.View;import android.widget.RelativeLayout;import android.widget.TextView;import com.baidu.ocr.ui.camera.CameraActivity;import com.bibinet.intelibuild.R;import com.bibinet.intelibuild.mvp.presenter.OcrIndentifyResultActivityPresenter;import com.bibinet.intelibuild.mvp.view.OcrIndentifyResultActivityView;import com.bibinet.intelibuild.project.application.Constants;import com.bibinet.intelibuild.project.builder.CustomerLinearLayout;import com.bibinet.intelibuild.project.ui.baseui.BaseActivity;import com.bibinet.intelibuild.project.utils.ClearDataUtils;import com.bibinet.intelibuild.project.utils.CompareUtils;import com.bibinet.intelibuild.project.utils.FileUtil;import com.bibinet.intelibuild.project.utils.OcrIdentifyUtils;import com.bibinet.intelibuild.project.utils.RegexUtils;import com.bibinet.intelibuild.project.utils.ocrStrategy.OcrAllNumberGetTogether;import com.bibinet.intelibuild.project.utils.ocrStrategy.OcrAllNumberStrategy;import com.bibinet.intelibuild.project.utils.ocrStrategy.OcrIndentifyResultStrategy;import com.bibinet.intelibuild.project.utils.ocrStrategy.OcrResultStrategyHasPoint;import com.bibinet.intelibuild.project.utils.ocrStrategy.OcrStrategyContext;import com.shawnlin.numberpicker.NumberPicker;import com.zyl_android.generalutils.coustomview.WaitView;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;/** * Created by bibinet on 2018-1-3. */public class OcrIndentifyResultActivity extends BaseActivity implements OcrIndentifyResultActivityView,OcrIdentifyUtils.ocrIndentifyView {    private static final int REQUEST_CODE_CAMERA = 1;    private static final int REQUEST_CODE_PICK_IMAGE = 2;    @BindView(R.id.ocrResult)    TextView ocrResult;    @BindView(R.id.numberPicker)    NumberPicker numberPicker;    @BindView(R.id.productName)    TextView productName;    @BindView(R.id.productNumber)    TextView productNumber;    @BindView(R.id.checkProjcet)    TextView checkProjcet;    @BindView(R.id.doStandard)    TextView doStandard;    @BindView(R.id.firstChcekNumb)    TextView firstChcekNumb;    @BindView(R.id.secondChcekNumb)    TextView secondChcekNumb;    @BindView(R.id.thridChcekNumb)    TextView thridChcekNumb;    @BindView(R.id.closeRemind)    AppCompatImageView closeRemind;    @BindView(R.id.backHome)    TextView backHome;    @BindView(R.id.repeatCamer)    TextView repeatCamer;    @BindView(R.id.errorDescrp)    RelativeLayout errorDescrp;    @BindView(R.id.waitView)    WaitView waitView;    @BindView(R.id.imageResultDescrip)    AppCompatImageView imageResultDescrip;    @BindView(R.id.customLinearLayout)    CustomerLinearLayout customLinearLayout;    private String[] numberPickerValues = {"Ω", "KΩ", "MΩ"};    private OcrIndentifyResultActivityPresenter ocrIndentifyResultActivityPresenter;    private String realOcrResult;//将Ocr获取到的结果转换为实际结果    private String checkUnit=RegexUtils.containsWich(Constants.ocrDoStand);    private String selectedOcrUnit="KΩ";//设置默认选中的numberpicker的单位    private boolean isFixData=false;//是否对识别结果进行过修改    private String ocrResultInfo;    private String fixValue;    private String isCorrect="false";//检测结果是否合格    @Override    protected int getChildlayout() {        return R.layout.activity_ocresult;    }    @Override    protected void initView() {        title.setText("识别结果");        String filePath = getIntent().getStringExtra("camerFilePath");        firstChcekNumb.setText(Constants.firstOcrCheckNumber);        secondChcekNumb.setText(Constants.secondOcrCheckNumber);        thridChcekNumb.setText(Constants.thridOcrCheckNumber);        ocrIndentifyResultActivityPresenter=new OcrIndentifyResultActivityPresenter(this);        OcrIdentifyUtils.recGeneral(this, filePath);        initNumberPicker();        waitView.start();        customLinearLayout.setCanUse(true);        productName.setText(Constants.ocrProductName);        productNumber.setText(Constants.ocrProductNumber);        checkProjcet.setText(Constants.ocrCheckProject);        doStandard.setText(Constants.ocrDoStand);        //策略模式使用        OcrStrategyContext ocrStrategyContext=new OcrStrategyContext(new OcrResultStrategyHasPoint());        ocrStrategyContext.getOcrIndentifyResult("zhanlajdf123.2");    }    private void initNumberPicker() {        numberPicker.setDisplayedValues(numberPickerValues);        numberPicker.setOnValueChangedListener(new NumberPicker.OnValueChangeListener() {            @Override            public void onValueChange(NumberPicker numberPicker, int i, int i1) {                selectedOcrUnit = numberPickerValues[i1];                String value=String.valueOf(RegexUtils.getNumberHasPoint(ocrResult.getText().toString().trim())*CompareUtils.getconVersionValue(selectedOcrUnit,checkUnit));                log("ocr显示的值是",String.valueOf(RegexUtils.getNumberHasPoint(ocrResult.getText().toString().trim())));                setCheckResult(value);            }        });    }    @OnClick({R.id.backHome, R.id.repeatCamer, R.id.closeRemind,R.id.fixIndentifyResult})    public void onViewClicked(View view) {        switch (view.getId()) {            case R.id.backHome:                if (isCorrect.equals("false")) {                    ClearDataUtils.clearOcrData();                    finish();                    return;                }                if (Constants.OcrCheckNumber == 1) {                    postData(firstChcekNumb);                    Constants.OcrCheckNumber++;                    startOcrIndentify(true);                } else if (Constants.OcrCheckNumber == 2) {                    postData(secondChcekNumb);                    Constants.OcrCheckNumber++;                    startOcrIndentify(true);                }else{                    postData(thridChcekNumb);                    ClearDataUtils.clearOcrData();                    finish();                }                break;            case R.id.repeatCamer:                startOcrIndentify(false);                break;            case R.id.closeRemind:                errorDescrp.setVisibility(View.GONE);                break;            case R.id.fixIndentifyResult:                Intent intent=new Intent(this,FixOcrResultActivity.class);                intent.putExtra("ocrData",ocrResult.getText().toString());                startActivityForResult(intent,1);                break;        }    }    //将Ocr识别出来的结果进行赋值    private void setOcrValues(String info) {        if (isFixData) {            realOcrResult = String.valueOf(RegexUtils.getNumberHasPoint(fixValue)*CompareUtils.getconVersionValue(selectedOcrUnit,checkUnit));            ocrResult.setText(fixValue);        }else {            realOcrResult = String.valueOf(RegexUtils.getNumberHasPoint(info)*CompareUtils.getconVersionValue(selectedOcrUnit,checkUnit));            ocrResult.setText(realOcrResult);        }        if (Constants.OcrCheckNumber == 1) {            backHome.setText("下一个样品检测");            firstChcekNumb.setText(realOcrResult+checkUnit);            Constants.firstOcrCheckNumber=realOcrResult+checkUnit;            checkDataIsRight(firstChcekNumb);        } else if (Constants.OcrCheckNumber == 2) {            backHome.setText("下一个样品检测");            secondChcekNumb.setText(realOcrResult+checkUnit);            Constants.secondOcrCheckNumber=realOcrResult+checkUnit;            checkDataIsRight(secondChcekNumb);        } else {            thridChcekNumb.setText(realOcrResult+checkUnit);            Constants.thridOcrCheckNumber=realOcrResult+checkUnit;            checkDataIsRight(thridChcekNumb);            backHome.setText("返回主页");        }        isFixData=false;    }    //检测识别结果是否在标准范围之内    private void checkDataIsRight(TextView textView) {        RegexUtils.getNumber(doStandard.getText().toString());        log("第一次的结果是",Integer.parseInt(RegexUtils.regexsList.get(0))+"");        log("第二次的结果是",Integer.parseInt(RegexUtils.regexsList.get(1))+"");        log("修改的值为",RegexUtils.getNumberHasPoint(ocrResult.getText().toString().trim())*CompareUtils.getconVersionValue(selectedOcrUnit,checkUnit)+"");        if (RegexUtils.getNumberHasPoint(ocrResult.getText().toString().trim())*CompareUtils.getconVersionValue(selectedOcrUnit,checkUnit)<Integer.parseInt(RegexUtils.regexsList.get(0))||                RegexUtils.getNumberHasPoint(ocrResult.getText().toString().trim())*CompareUtils.getconVersionValue(selectedOcrUnit,checkUnit)>Integer.parseInt(RegexUtils.regexsList.get(1))) {            textView.setTextColor(Color.RED);            textView.setTextSize(18);            imageResultDescrip.setImageResource(R.mipmap.buheg);            errorDescrp.setVisibility(View.GONE);            backHome.setText("返回主页");            isCorrect="false";        }else {            if (Constants.OcrCheckNumber==3) {                imageResultDescrip.setImageResource(R.mipmap.hege);                imageResultDescrip.setVisibility(View.VISIBLE);            }            imageResultDescrip.setVisibility(View.GONE);            textView.setTextColor(Color.BLACK);            textView.setTextSize(14);            errorDescrp.setVisibility(View.GONE);            isCorrect="true";        }    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode==1&&resultCode==RESULT_OK) {            selectedOcrUnit=data.getStringExtra("ocrUnit");            isFixData=data.getBooleanExtra("isfixData",false);            fixValue=data.getStringExtra("fixValue");            setCheckResult((data.getStringExtra("fixValue")));            if (selectedOcrUnit.equals("Ω")) {                numberPicker.setValue(0);            }else if (selectedOcrUnit.equals("KΩ")) {                numberPicker.setValue(1);            }else {                numberPicker.setValue(2);            }            setOcrValues(ocrResultInfo);        }    }    //将识别以后的结果设置到检测值的位置上    private void setCheckResult(String fixValue) {        if (Constants.OcrCheckNumber == 1) {            firstChcekNumb.setText(fixValue+checkUnit);            Constants.firstOcrCheckNumber=fixValue+checkUnit;            checkDataIsRight(firstChcekNumb);        } else if (Constants.OcrCheckNumber == 2) {            secondChcekNumb.setText(fixValue+checkUnit);            Constants.secondOcrCheckNumber=fixValue+checkUnit;            checkDataIsRight(secondChcekNumb);        } else {            thridChcekNumb.setText(fixValue+checkUnit);            Constants.thridOcrCheckNumber=fixValue+checkUnit;            checkDataIsRight(thridChcekNumb);        }    }    private void startOcrIndentify(boolean isNextPage) {        Intent intent = new Intent(this, CameraActivity.class);        intent.putExtra("isNative", isNextPage);//是否本页面回调        intent.putExtra(CameraActivity.KEY_OUTPUT_FILE_PATH,                FileUtil.getSaveFile(getApplication()).getAbsolutePath());        intent.putExtra(CameraActivity.KEY_CONTENT_TYPE,                CameraActivity.CONTENT_TYPE_GENERAL);        startActivityForResult(intent, REQUEST_CODE_CAMERA);        if (isNextPage) {            finish();        }    }    //提交识别出来的数据    private void postData(TextView textView) {        ocrIndentifyResultActivityPresenter.postOcrResult(this,"userId",productName.getText().toString(),productNumber.getText().toString(),                checkProjcet.getText().toString(),doStandard.getText().toString(),textView.getText().toString());    }    @Override    public void onPostOcrIndentifyResultSuceess() {    }    @Override    public void onPostOcrIndentifyResultFailed() {    }    @Override    public void onOcrIndentifySucess(String info) {        waitView.stop();        waitView.setVisibility(View.GONE);        customLinearLayout.setCanUse(false);        ocrResultInfo=info;        setOcrValues(ocrResultInfo);    }    @Override    public void onOcrIndentifyFailed(String error) {    }}